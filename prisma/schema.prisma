// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Needed for auth DONT TOUCH

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  resumes       Resume[]
  skills        Skill[]
  activites     Activity[]
  contacts      Contact[]
  awards        Award[]
  education     Education[]
  experience    Experience[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Skill Related

model Skill {
  id          String        @id @default(cuid())
  name        String
  User        User[]
  Tags        SkillTag[]
  ResumeSkill ResumeSkill[]
}

model ResumeSkill {
  resumeId String
  skillId  String
  order    Int    @default(autoincrement())
  Resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  Skill    Skill  @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@id([resumeId, skillId])
}

model SkillTag {
  label  String  @id @default(cuid())
  Skills Skill[]
}

// Contact Related

model Contact {
  id     String   @id @default(cuid())
  userId String
  data   String
  User   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Resume Resume[]

  @@unique([userId, data])
}

// Education Related

model Education {
  id            String    @id @default(cuid())
  userId        String
  schoolName    String
  concentration String?
  start         DateTime
  end           DateTime?
  description   String
  Courses       Course[]
  Honors        Honor[]
  Resume        Resume[]
  User          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Course {
  id       String    @id @default(cuid())
  schoolId String
  name     String
  number   String?
  School   Education @relation(fields: [schoolId], references: [id], onDelete: Cascade)
}

model Honor {
  id       String    @id @default(cuid())
  schoolId String
  name     String
  School   Education @relation(fields: [schoolId], references: [id], onDelete: Cascade)
}

// Experience Related

model Experience {
  id       String    @id @default(cuid())
  userId   String
  label    String
  position String
  start    DateTime
  end      DateTime?
  Resume   Resume[]
  User     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Activity Related

model Activity {
  id     String    @id @default(cuid())
  userId String
  label  String
  start  DateTime
  end    DateTime?
  Resume Resume[]
  User   User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Awards Related

model Award {
  id     String   @id @default(cuid())
  userId String
  label  String
  Resume Resume[]
  User   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Resume Related

model Resume {
  id         String        @id @default(cuid())
  name       String?
  ownerId    String
  templateId String
  public     Boolean
  Owner      User          @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  Template   Template      @relation(fields: [templateId], references: [id])
  Contacts   Contact[]
  Skills     ResumeSkill[]
  Education  Education[]
  Experience Experience[]
  Activity   Activity[]
  Awards     Award[]
}

model Template {
  id     String   @id @default(cuid())
  name   String   @unique
  styles Json
  Resume Resume[]
}
