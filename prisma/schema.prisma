// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Needed for auth

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  resumes       Resume[]
  skills        UserSkill[]
  contacts      Contact[]
  education     Education[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Skill Related

model Skill {
  id        String      @id @default(cuid())
  name      String
  UserSkill UserSkill[]
  Tags      SkillTag[]
}

model ResumeSkill {
  id       String    @id @default(cuid())
  resumeId String
  skillId  String
  order    Int       @default(autoincrement())
  Resume   Resume    @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  Skill    UserSkill @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@unique([resumeId, skillId])
}

model UserSkill {
  id      String        @id @default(cuid())
  skillId String
  userId  String
  Skill   Skill         @relation(fields: [skillId], references: [id], onDelete: Cascade)
  User    User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  Resumes ResumeSkill[]

  @@unique([skillId, userId])
}

model SkillType {
  id        String     @id @default(cuid())
  Name      String     @unique
  SkillTags SkillTag[]
}

model SkillTag {
  id      String    @id @default(cuid())
  typeId  String
  skillId String
  Skill   Skill     @relation(fields: [skillId], references: [id], onDelete: Cascade)
  Type    SkillType @relation(fields: [typeId], references: [id], onDelete: Cascade)

  @@unique([typeId, skillId])
}

// Contact Related

model Contact {
  id     String          @id @default(cuid())
  userId String
  data   String
  User   User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  Resume ResumeContact[]

  @@unique([userId, data])
}

model ResumeContact {
  id        String  @id @default(cuid())
  contactId String
  resumeId  String
  Contact   Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)
  Resume    Resume  @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@unique([contactId, resumeId])
}

// Education Related

model Education {
  id            String            @id @default(cuid())
  userId        String
  schoolName    String
  concentration String?
  start         DateTime
  end           DateTime?
  description   String
  Courses       Course[]
  Honors        Honor[]
  Resume        ResumeEducation[]
  User          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ResumeEducation {
  id          String    @id @default(cuid())
  resumeId    String
  educationId String
  Resume      Resume    @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  Education   Education @relation(fields: [educationId], references: [id], onDelete: Cascade)

  @@unique([resumeId, educationId])
}

model Course {
  id       String    @id @default(cuid())
  schoolId String
  name     String
  number   String?
  School   Education @relation(fields: [schoolId], references: [id], onDelete: Cascade)
}

model Honor {
  id       String    @id @default(cuid())
  schoolId String
  name     String
  School   Education @relation(fields: [schoolId], references: [id], onDelete: Cascade)
}

// Experience Related

model Experience {
  id               String             @id @default(cuid())
  userId           String
  label            String
  position         String
  start            DateTime
  end              DateTime?
  ResumeExperience ResumeExperience[]
}

model ResumeExperience {
  id           String     @id @default(cuid())
  resumeId     String
  experienceId String
  Resume       Resume     @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  Experience   Experience @relation(fields: [experienceId], references: [id], onDelete: Cascade)

  @@unique([resumeId, experienceId])
}

// Activity Related

model Activity {
  id             String           @id @default(cuid())
  label          String
  start          DateTime
  end            DateTime?
  ResumeActivity ResumeActivity[]
}

model ResumeActivity {
  id         String   @id @default(cuid())
  activityId String
  resumeId   String
  Activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  Resume     Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@unique([activityId, resumeId])
}

// Awards Related

model Award {
  id          String        @id @default(cuid())
  label       String
  ResumeAward ResumeAward[]
}

model ResumeAward {
  id       String @id @default(cuid())
  awardId  String
  resumeId String
  Award    Award  @relation(fields: [awardId], references: [id], onDelete: Cascade)
  Resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

// Resume Related

model Resume {
  id         String             @id @default(cuid())
  name       String?
  ownerId    String
  templateId String
  public     Boolean
  Owner      User               @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  Template   Template           @relation(fields: [templateId], references: [id])
  Contacts   ResumeContact[]
  Skills     ResumeSkill[]
  Education  ResumeEducation[]
  Experience ResumeExperience[]
  Activity   ResumeActivity[]
  Awards     ResumeAward[]
}

model Template {
  id     String   @id @default(cuid())
  name   String   @unique
  styles Json
  Resume Resume[]
}
